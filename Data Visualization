3.5 Data Visualization

**You may attempt this section in the Jupyter Notebook: 
https://colab.research.google.com/drive/19oUOYZ3N8152ZRN1i9_jPXMezpCBTFO-#scrollTo=J26a1eM1w_cx

In this tutorial we will look into how to visualize data.
There are 3 broder categories of visualization.

    Univariate Visualization
    Bivariate Visualization
    Multivariate Visualization

Univariate Visualization

Univariate visualisation is about visualise single attribute. First we need to find the data type of an and then we can visualise them. There are 4 data types: categorical nominal, categorical ordinal, metric discrete and metric continoues. Based on the data type we can choose appropriate visualization
im1
im2

Consider the following dataset about t-shirts.
im3





//








#Below we create the above dataset using random function. Let us generate a dataframe for 1000 randomly generate t-shirt information.
import random
import pandas as pd
import matplotlib
import matplotlib.pyplot as plt
import numpy as np
import string

import seaborn as sns

print('matplotlib: {}'. format(  matplotlib. __version__)) 

sizes = ["S", "M", "L", "XL","XXL"]
colors = ["black", "red", "white", "blue"]

#Below we create functions to generate a probable value for each column attribute randomly.
def generate_random_id():
    return str(random.randrange(100,999))+random.choice(string.ascii_uppercase)

def generate_random_size():
    return random.choices(sizes,weights=[0.15, 0.32, 0.28,0.20,0.05])[0]

def generate_random_color():
    return random.choice(colors)

def generate_random_price():
    return round(random.uniform(0, 10000),2)

def generate_random_stock():
    return random.randrange(12,2345)
    
total_no_of_tshirts=1000
data = []
for i in range(total_no_of_tshirts):
  row = []
  row.append(generate_random_id())
  row.append(generate_random_size())
  row.append(generate_random_color())
  row.append(generate_random_price())
  row.append(generate_random_stock())
  data.append(row)
df=pd.DataFrame(data,columns = ['id', 'size','color','price','stock'])
print(df)











//








Let us plot a pie chart to inspect the stock percentage bt size. To do that we need the total number of t shirts by size. we can ues groupby method available in pandas library to generate this data.

Lets plot the data we obtained in the above step. Note the first column of a group by method output is an index.
We are using the pyplot libray to plot pie chart.






//






#Below we create the above dataset using random function. Let us generate a dataframe for 1000 randomly generate t-shirt information.
import random
import pandas as pd
import matplotlib
import matplotlib.pyplot as plt
import numpy as np
import string

import seaborn as sns

print('matplotlib: {}'. format(  matplotlib. __version__)) 

sizes = ["S", "M", "L", "XL","XXL"]
colors = ["black", "red", "white", "blue"]

#Below we create functions to generate a probable value for each column attribute randomly.
def generate_random_id():
    return str(random.randrange(100,999))+random.choice(string.ascii_uppercase)

def generate_random_size():
    return random.choices(sizes,weights=[0.15, 0.32, 0.28,0.20,0.05])[0]

def generate_random_color():
    return random.choice(colors)

def generate_random_price():
    return round(random.uniform(0, 10000),2)

def generate_random_stock():
    return random.randrange(12,2345)
    
total_no_of_tshirts=1000
data = []
for i in range(total_no_of_tshirts):
  row = []
  row.append(generate_random_id())
  row.append(generate_random_size())
  row.append(generate_random_color())
  row.append(generate_random_price())
  row.append(generate_random_stock())
  data.append(row)
df=pd.DataFrame(data,columns = ['id', 'size','color','price','stock'])
#print(df)

stock_by_size=df.groupby(['size']).sum() 
print(stock_by_size)

plt.pie(stock_by_size['stock'], labels = stock_by_size.index)
plt.title("t-shirt stok")
plt.show()







//











Below we show how to plot a grouped bar chart.





//





#Below we create the above dataset using random function. Let us generate a dataframe for 1000 randomly generate t-shirt information.
import random
import pandas as pd
import matplotlib
import matplotlib.pyplot as plt
import numpy as np
import string

import seaborn as sns

print('matplotlib: {}'. format(  matplotlib. __version__)) 

sizes = ["S", "M", "L", "XL","XXL"]
colors = ["black", "red", "white", "blue"]

#Below we create functions to generate a probable value for each column attribute randomly.
def generate_random_id():
    return str(random.randrange(100,999))+random.choice(string.ascii_uppercase)

def generate_random_size():
    return random.choices(sizes,weights=[0.15, 0.32, 0.28,0.20,0.05])[0]

def generate_random_color():
    return random.choice(colors)

def generate_random_price():
    return round(random.uniform(0, 10000),2)

def generate_random_stock():
    return random.randrange(12,2345)
    
total_no_of_tshirts=1000
data = []
for i in range(total_no_of_tshirts):
  row = []
  row.append(generate_random_id())
  row.append(generate_random_size())
  row.append(generate_random_color())
  row.append(generate_random_price())
  row.append(generate_random_stock())
  data.append(row)
df=pd.DataFrame(data,columns = ['id', 'size','color','price','stock'])
#print(df)

stock_by_size=df.groupby(['size']).sum() 
#print(stock_by_size)

#plt.pie(stock_by_size['stock'], labels = stock_by_size.index)
#plt.title("t-shirt stok")
#plt.show()

dark_stock = [20, 34, 30, 35, 27]
light_stock = [25, 32, 34, 20, 25]

x = np.arange(len(sizes))  # the label locations
width = 0.35  # the width of the bars

fig, ax = plt.subplots()
rects1 = ax.bar(x - width/2, dark_stock, width, label='Dark')
rects2 = ax.bar(x + width/2, light_stock, width, label='Light')

# Add some text for labels, title and custom x-axis tick labels, etc.
ax.set_ylabel('Stock')
ax.set_title('Stock by size and color intensity')
ax.set_xticks(x)
ax.set_xticklabels(sizes)
ax.legend()

#ax.bar_label(rects1, padding=3)
#ax.bar_label(rects2, padding=3)

fig.tight_layout()

plt.show()






//







Below we show how to plot a stacked bar chart.





//




#Below we create the above dataset using random function. Let us generate a dataframe for 1000 randomly generate t-shirt information.
import random
import pandas as pd
import matplotlib
import matplotlib.pyplot as plt
import numpy as np
import string

import seaborn as sns

print('matplotlib: {}'. format(  matplotlib. __version__)) 

sizes = ["S", "M", "L", "XL","XXL"]
colors = ["black", "red", "white", "blue"]

#Below we create functions to generate a probable value for each column attribute randomly.
def generate_random_id():
    return str(random.randrange(100,999))+random.choice(string.ascii_uppercase)

def generate_random_size():
    return random.choices(sizes,weights=[0.15, 0.32, 0.28,0.20,0.05])[0]

def generate_random_color():
    return random.choice(colors)

def generate_random_price():
    return round(random.uniform(0, 10000),2)

def generate_random_stock():
    return random.randrange(12,2345)
    
total_no_of_tshirts=1000
data = []
for i in range(total_no_of_tshirts):
  row = []
  row.append(generate_random_id())
  row.append(generate_random_size())
  row.append(generate_random_color())
  row.append(generate_random_price())
  row.append(generate_random_stock())
  data.append(row)
df=pd.DataFrame(data,columns = ['id', 'size','color','price','stock'])
#print(df)

stock_by_size=df.groupby(['size']).sum() 
#print(stock_by_size)

#plt.pie(stock_by_size['stock'], labels = stock_by_size.index)
#plt.title("t-shirt stok")
#plt.show()

dark_stock = [20, 34, 30, 35, 27]
light_stock = [25, 32, 34, 20, 25]

x = np.arange(len(sizes))  # the label locations
width = 0.35  # the width of the bars

fig, ax = plt.subplots()
rects1 = ax.bar(x - width/2, dark_stock, width, label='Dark')
rects2 = ax.bar(x + width/2, light_stock, width, label='Light')

# Add some text for labels, title and custom x-axis tick labels, etc.
ax.set_ylabel('Stock')
ax.set_title('Stock by size and color intensity')
ax.set_xticks(x)
ax.set_xticklabels(sizes)
ax.legend()

#ax.bar_label(rects1, padding=3)
#ax.bar_label(rects2, padding=3)

fig.tight_layout()

plt.show()






//







Below we show how to use subplots to display tow charts next to next and support bivariate analysis.





//





#Below we create the above dataset using random function. Let us generate a dataframe for 1000 randomly generate t-shirt information.
import random
import pandas as pd
import matplotlib
import matplotlib.pyplot as plt
import numpy as np
import string

import seaborn as sns

print('matplotlib: {}'. format(  matplotlib. __version__)) 

sizes = ["S", "M", "L", "XL","XXL"]
colors = ["black", "red", "white", "blue"]

#Below we create functions to generate a probable value for each column attribute randomly.
def generate_random_id():
    return str(random.randrange(100,999))+random.choice(string.ascii_uppercase)

def generate_random_size():
    return random.choices(sizes,weights=[0.15, 0.32, 0.28,0.20,0.05])[0]

def generate_random_color():
    return random.choice(colors)

def generate_random_price():
    return round(random.uniform(0, 10000),2)

def generate_random_stock():
    return random.randrange(12,2345)
    
total_no_of_tshirts=1000
data = []
for i in range(total_no_of_tshirts):
  row = []
  row.append(generate_random_id())
  row.append(generate_random_size())
  row.append(generate_random_color())
  row.append(generate_random_price())
  row.append(generate_random_stock())
  data.append(row)
df=pd.DataFrame(data,columns = ['id', 'size','color','price','stock'])
#print(df)

stock_by_size=df.groupby(['size']).sum() 
#print(stock_by_size)

#plt.pie(stock_by_size['stock'], labels = stock_by_size.index)
#plt.title("t-shirt stok")
#plt.show()

dark_stock = [20, 34, 30, 35, 27]
light_stock = [25, 32, 34, 20, 25]

x = np.arange(len(sizes))  # the label locations
width = 0.35  # the width of the bars

fig, ax = plt.subplots()
rects1 = ax.bar(x - width/2, dark_stock, width, label='Dark')
rects2 = ax.bar(x + width/2, light_stock, width, label='Light')

# Add some text for labels, title and custom x-axis tick labels, etc.
ax.set_ylabel('Stock')
ax.set_title('Stock by size and color intensity')
ax.set_xticks(x)
ax.set_xticklabels(sizes)
ax.legend()

#ax.bar_label(rects1, padding=3)
#ax.bar_label(rects2, padding=3)

fig.tight_layout()

plt.show()






//






