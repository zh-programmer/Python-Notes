TCP Applications

Let us build a simple application which communicate both ways.
Echo Server

Echo Server is a server which follows the client-server architecture. The client will establish a connection to the server, and send a message. The server (i.e. Echo server) will receive the message from the client and send the same message back to the client.

You can find two trinkets below to test the echo server and echo client. First, you have to run the first trinket, (echoserver.py) and it will be "Listening.." to any incoming requests from clients.

Then you can run the second trinket (echoclient.py) using the ip address and the port number for echoserver application. We are using the IP address 127.0.0.1 localhost, assuming both of our trinkets are running in a same machine.

(Here, you might face some difficulty connecting to the server, with an error message such as Connection Refused. This is because the trinket is a shared resource which is used to facilitate coding in the browser itself, but the port numbers are unique and shared with many students. Therefore, it is preferred if you use a local environment such as IDLE to test these networked appilcations.)

You can try to run the second trinket with echoclient (try several times if there is an error message) to see a Hello! message being delivered to the server and received back. You will see the echoserver output (first trinket) will display the established connection details of the echoclient as well.





//




#echoserver.py
import socket
port = 1235
address = "127.0.0.1"
BUF_SIZE = 1024

# create a socket object name 'server'
server = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
server.bind((address, port))
server.listen(5)
print("Listening..")
while True:
    con, addr = server.accept()
    print ("Connection Address is: " , addr)
    data = con.recv(BUF_SIZE)
    print(data.decode("utf-8"))
    con.send(data)




//


#------------------

//




#echoclient.py
import socket
port = 1235
address = '127.0.0.1'
BUF_SIZE = 1024

# create a socket object name 'con'
con = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
con.connect((address, port))

message = "Hello!"
con.send(bytes(message,"utf-8"));

data = con.recv(BUF_SIZE)
con.close()
print(data.decode("utf-8"))






//

Buffered EchoServer

This is an improved echo server application which can be used with arbitrary sized messages

    First observe the behavior of the program by first starting the echoserverv2, and then running the echoclientv2.
    Read the code at both server-side and client-side carefully and try to understand it.
    Now you understand the concept, use the IDLE local environment or use the trinket to code this program by yourself. You can start with the echoserver (version1) and echoclient (version1) and improve it to achieve the functionality of the version 2. 
    Practice is important! So make sure you can code this buferred server and client before moving to the next section!




//




import socket
port = 1236
address = "127.0.0.1"
BUF_SIZE = 15
HEADER_SIZE = 10
# create a socket object name 'server'
server = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
server.bind((address, port))
server.listen(5)
print("Listening..")
while True:
    con, addr = server.accept()
    print ("Connection Address is: " , addr)
    message =""
    msg_length = 0
    newmsg = True
    while True:
        data = con.recv(BUF_SIZE)
        if newmsg:
            msg_length = int(data[:HEADER_SIZE].decode("utf-8"))
            #print(msg_length)
            message+=data[HEADER_SIZE:].decode("utf-8")
            newmsg = False
        else:
            message+=data.decode("utf-8")
            
        #print(len(full_msg))
        if(len(message)>= msg_length):
            #print("full message received")
            print(message)
            break
    con.send(bytes("{msg_length:{hs}d}".format(msg_length=len(message),hs=HEADER_SIZE) + message,"utf-8"))
    
    
    





//


#-----------------

//



#echoclientv2.py
import socket
port = 1236
address = '127.0.0.1'
BUF_SIZE = 15
HEADER_SIZE = 10
# create a socket object name 'con'
con = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
con.connect((address, port))

message = "Hello!This is a longer message than the available buffer size of 15bytes"

con.send(bytes("{msg_length:{hs}d}".format(msg_length=len(message),hs=HEADER_SIZE) + message,"utf-8"));

message = ""    #Clear buffer to receive the data from server
newmsg = True
while True:
    data = con.recv(BUF_SIZE)
    if newmsg:
        msg_length = int(data[:HEADER_SIZE].decode("utf-8"))
        #print(msg_length)
        message+=data[HEADER_SIZE:].decode("utf-8")
        newmsg = False
    else:
        message+=data.decode("utf-8")
        
    #print(len(full_msg))
    if(len(message)>=msg_length):
        #print("full message received")
        print(message)
        break

#If I need to send another message before closing connection, it can be done here.
    
con.close()





//

 
EchoServer with a Sustained Connection

Previous version of the echoserver is totally fine to handle any message, however, it only serves a single request from the client, before disconnecting.
Sustained connection to the server can be useful to communicate fast.

echoserverv3.py can keep the connection alive until it receives a very specific message, 'exit'. echoclientv3.py will establish a connection, and it will ask for user input for a message to be sent to the server, and to get echoed back.
Client can enter the message using the keyboard, and press enter to send the message. If the message reads as exit, the client will terminate the program after echoing the message through server.

Try this program in following trinkets.




//




#echoserverv3.py
import socket
port = 1236
address = "127.0.0.1"
BUF_SIZE = 15
HEADER_SIZE = 10
# create a socket object name 'server'
server = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
server.bind((address, port))
server.listen(5)
print("Listening..")
while True:
    con, addr = server.accept()
    print ("Connection Address is: " , addr)
    message =""
    while(message != "exit"):
        message =""
        msg_length = 0
        newmsg = True
        while True:
            data = con.recv(BUF_SIZE)
            if newmsg:
                msg_length = int(data[:HEADER_SIZE].decode("utf-8"))
                #print(msg_length)
                message+=data[HEADER_SIZE:].decode("utf-8")
                newmsg = False
            else:
                message+=data.decode("utf-8")
            
            #print(len(message))
            if(len(message)>= msg_length):
                print("full message received")
                print(message)
                break
        con.send(bytes("{msg_length:{hs}d}".format(msg_length=len(message),hs=HEADER_SIZE) + message,"utf-8"))
        if(message == "exit"):
            print("Finished serving client: ", addr)
    
    





//




#-------------


//




#echoclientv3.py
import socket
port = 1236
address = '127.0.0.1'
BUF_SIZE = 15
HEADER_SIZE = 10
# create a socket object name 'con'
con = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
con.connect((address, port))


message =""
while (message != "exit"):
    message = input("Enter a message: \"exit\" to abort:")
    #print(message)
    full_msg = "{msg_length:{hs}d}".format(msg_length=len(message),hs=HEADER_SIZE) + message
    con.send(bytes(full_msg,"utf-8"));

    newmsg = True
    message = ""
    while True:
        data = con.recv(BUF_SIZE)
        if newmsg:
            msg_length = int(data[:HEADER_SIZE].decode("utf-8"))
            #print(msg_length)
            message+=data[HEADER_SIZE:].decode("utf-8")
            newmsg = False
        else:
            message+=data.decode("utf-8")
        
        #print(len(full_msg))
        if(len(message)>=msg_length):
            #print("full message received")
            print(message)
            break
    
con.close()
print("Connection Closed")





//

 
